import {src/team}!

tally: function [lines][
    @[heading] ++ processInput lines
    | join.with: "\n" 
]

;------------------------------------------------------------
processInput: function [lines][
    if empty? lines -> return []

    teams: #[]
    loop (split.lines lines) [line][
        [home away result]: split.by: ";" line
        initTeam 'teams home
        initTeam 'teams away
        processMatch 'teams home away result
    ]

    standings: sort values teams

    map standings [t][
        formatLine t\name t\matches t\wins t\draws t\losses t\points
    ]
]

initTeam: function [ts name][
    teams: var ts
    if not? key? teams name [
        teams\[name]: to :team @[name]
    ]
]

processMatch: function [ts home away result][
    teams: var ts
    case result [
        "win" [
            teams\[home]\win
            teams\[away]\lose
        ]
        "loss" [
            teams\[home]\lose
            teams\[away]\win
        ]
        "draw" [
            teams\[home]\draw
            teams\[away]\draw
        ]
    ]
]

;------------------------------------------------------------
formatLine: function [name matches wins draws losses points][
    @[
        (pad.right name 30)
        (pad (to :string matches) 2)
        (pad (to :string wins) 2)
        (pad (to :string draws) 2)
        (pad (to :string losses) 2)
        (pad (to :string points) 2)
    ] | join.with: " | "
]

heading: formatLine "Team" "MP" "W" "D" "L" "P"
